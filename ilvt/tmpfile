

let memwAntAssert adr = TAndList (flat (map (\i. 
                                ( map (\j. (memwUnit i j adr) bvAre (memwV i adr)) (0 upto (M-2)))
                            ) (0 upto (M-1))))
;
let memrAntAssert adr = TAndList (flat (map (\i. 
                                ( map (\j. (memrUnit i j adr) bvAre (memrV i adr)) (0 upto (N-1)))
                            ) (0 upto (M-1))))
;
let memwConsAssert adr  = TAndList (flat (map (\i. 
                                ( map (\j. (memwUnit i j adr) bvAre (memwV i adr)) (0 upto (M-2)))
                            ) (0 upto (M-1))))
;
let memrConsAssert adr = TAndList (flat (map (\i. 
                                ( map (\j. (memrUnit i j adr) bvAre (memrV i adr)) (0 upto (N-1)))
                            ) (0 upto (M-1))))
;
let memwAntAssertNoK k adr = (TAndList (flat (map (\i. 
                                ( map (\j. (memwUnit i j adr) bvAre (memwV i adr)) (0 upto (M-2)))
                            ) (filter (\m. m!=k) (0 upto (M-1))))))
;
let memrAntAssertNoK k adr = (TAndList (flat (map (\i. 
                                ( map (\j. (memrUnit i j adr) bvAre (memrV i adr)) (0 upto (N-1)))
                            ) (filter (\i. i!=k) (0 upto (M-1))))))
;
// get all feedback to writePort k, defaultly retrieve other ports' first (0) feedback block
// 0 <= k < M, 0 <= fi < M-1
let feedbackw k fi adr = XORs (map (\wp. memwV wp adr) (filter (\i. i!=k) (0 upto (M-1))));
let memwConsAssertOnK K adr=Next (TAndList (map (\fbi. (memwUnit K fbi adr) bvAre (XORs [feedbackw K 0 adr, vDataIn])) (0 upto (M-2))));
// 0 <= k < M, 0 <= n < N
let feedbackr k n adr = XORs (map (\p. memrV p adr) (filter (\i. i!=k) (0 upto (M-1))));
let memrConsAssertOnK K adr =Next (TAndList (map (\n. (memrUnit K n adr) bvAre (XORs [feedbackr K n adr, vDataIn])) (0 upto (N-1))));
    
    fseq
    let v1 = get_trace_val ckt "Memory_1.mem<5><0>" 3 in
    let v2 = get_trace_val ckt "Memory_1.mem<5><1>" 3 in
    val (v1a, v1b) = v1 in
    val (v2a, v2b) = v2 in
    fprintf stdout "
Memory_1.mem<5><0>=(%B,%B)
Memory_1.mem<5><1>=(%B,%B) 
" (
v1a, v1b, 
v2a, v2b
)
;
let bmemwAntAssertNoK k adr = (TAndList (flat (map (\i. 
                                ( map (\j. TAndList [(memwUnit i j adr) bvAre (memwV i adr),
                                                     (muxwUnit i j adr) bvAre (muxwV i adr)]) (0 upto (M-2)))
                            ) (filter (\m. m!=k) (0 upto (M-1))))))
;
let bmemrAntAssertNoK k adr = (TAndList (flat (map (\i. 
                                ( map (\j. TAndList [(memrUnit i j adr) bvAre (memrV i adr), 
                                                    (muxrUnit i j adr) bvAre (muxrV i adr)] ) (0 upto (N-1)))
                            ) (filter (\i. i!=k) (0 upto (M-1))))))
;

    let memwAntAssert = TAndList (map (\j. (memwUnit K j adr) bvAre vDataIn) (0 upto (M-2))) in
    let muxwAntAssert = (TAndList (flat (map (\i. 
                                    (map (\j.(muxwUnit i j adr) bvAre (muxwV i adr)) (0 upto (M-2)))
                                ) (0 upto (M-1)))))
    in
    let wcellValAti i = (i<K => bNOT (muxwCellV i adr (K-1)) | (muxwCellV (i+1) adr K)) in
    let cnstrw = map (\i. bEqual (muxwCellV K adr i) (wcellValAti i)) (0 upto (M-2)) in
